name: CI/CD Build â†’ Push & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (defaults to "latest"). When deploying manually, set this to the tag you pushed (e.g. commit SHA)'
        required: false
        default: 'latest'

env:
  REGISTRY: ${{ secrets.REGISTRY }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE || 'default' }}

jobs:
  build-and-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      image_full: ${{ steps.set-image.outputs.image_full }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME || secrets.GHCR_USERNAME || github.actor }}
          password: ${{ secrets.DOCKER_PASSWORD || secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          push: true
          # two tags: the commit SHA and latest (optional)
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          file: ./Dockerfile

      - name: Set image variable
        id: set-image
        run: |
          echo "image_full=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Display image info
        run: |
          echo "Docker image built and pushed successfully!"
          echo "Image (sha): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Image (latest): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

  deploy:
    if: github.event_name == 'workflow_dispatch'     # only runs when manually triggered from the Actions UI
    runs-on: ubuntu-latest
    steps:
      - name: Resolve image to deploy
        run: |
          TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}"
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV
          echo "TAG=${TAG}" >> $GITHUB_ENV
        shell: bash

      - name: Fail if no deployment method configured
        if: secrets.MINIKUBE_SSH_HOST == '' && secrets.KUBECONFIG == ''
        run: |
          echo "No deployment method configured. Provide either MINIKUBE_SSH_HOST (and MINIKUBE_SSH_KEY) to SSH into your Minikube host, or add a KUBECONFIG secret with kubeconfig contents." >&2
          exit 1

      - name: Deploy via SSH to Minikube host
        if: secrets.MINIKUBE_SSH_HOST != ''
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.MINIKUBE_SSH_HOST }}
          username: ${{ secrets.MINIKUBE_SSH_USER || 'ubuntu' }}
          key: ${{ secrets.MINIKUBE_SSH_KEY }}
          port: ${{ secrets.MINIKUBE_SSH_PORT || 22 }}
          script: |
            set -eux
            echo "Deploying image: $IMAGE to namespace: $K8S_NAMESPACE"
            # pull image on the minikube host (if the host can access the registry)
            docker pull $IMAGE || true
            # update deployment (replace "myapp" with your deployment name/container name)
            kubectl -n $K8S_NAMESPACE set image deployment/myapp myapp=$IMAGE || kubectl -n $K8S_NAMESPACE rollout restart deployment/myapp
            kubectl -n $K8S_NAMESPACE rollout status deployment/myapp --timeout=120s

      - name: Install kubectl (for kubeconfig method)
        if: secrets.KUBECONFIG != ''
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Deploy using KUBECONFIG
        if: secrets.KUBECONFIG != ''
        run: |
          set -eux
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          echo "Deploying image: $IMAGE to namespace: $K8S_NAMESPACE"
          kubectl -n $K8S_NAMESPACE set image deployment/myapp myapp=$IMAGE || kubectl -n $K8S_NAMESPACE rollout restart deployment/myapp
          kubectl -n $K8S_NAMESPACE rollout status deployment/myapp --timeout=120s
        env:
          K8S_NAMESPACE: ${{ env.K8S_NAMESPACE }}

      - name: Deployment finished
        run: |
          echo "Deployment finished for image: $IMAGE"